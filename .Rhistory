df %>%  mutate_at( vars(contains("heading")) , list(mapd2r)) -> df2
help("mutate_at")
help(map)
d2r <- function(x){x <- x*pi/180
if(x > pi){x <- x - 2*pi}
}
mapd2r <- function(x){map(x,d2r)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(mapd2r)) -> df2
df2
x <- df$heading
map(x,d2r)
unlist(map(x,d2r))
d2r <- function(x){x <- x*pi/180
if(x > pi){x <- x - 2*pi}
}
mapd2r <- function(x){unlist(map(x,d2r))}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(mapd2r)) -> df2
d2r <- function(x){x <- x*pi/180
if(x > pi){x <- x - 2*pi}
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
help(else)
help(else)
help('else')
d2r <- function(x){if(x > 180){x <- x*pi/180 - 2*pi}
else {x <- x*pi/180}
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
d2r(df$heading[1])
warnings
warnings()
d2r(df$heading[1])
d2r(df$heading[1])
w <- d2r(df$heading[1])
w
w <- d2r(df$heading)
x <- c(100,200,300,125)
x
d2r(x)
x <- c(pi,2*pi,0,3,4,5,6)
x
x[x < pi]
d2r(x)
warnings()
d2r <- function(x){
x <- x*pi/180
x[x < pi] <- x[x < pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
x <- c(0,1,2,3,4,5,6,7)
x
d2r(x)
y <- d2r(x)
x <- c(0,1,2,3,4,5,6,7)
y <- d2r(x)
y
x[x < pi]
d2r <- function(x){
x <- x*pi/180
x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
df2
d2r <- function(x){
x <- x*pi/180
x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
df2
x <- c(0,1,2,3,4,5,6,7)
y <- d2r(y)
y <- d2r(x)
x
y
x[x > pi]
x[x > pi] - 2*pi
x
x[x > pi] <- x[x > pi] - 2*pi
x
4 - 2*pi
d2r <- function(x){
x <- x*pi/180
x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
df2
df
rm(list = ls(9)
rm(list = ls())
# df <- read_delim('Threshold_size.txt', delim = '\t')
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
#added the following from other rmd
df$heading <- as.numeric(df$degrees)*pi/180
options(mc.cores = parallel::detectCores())  # run all cores
Sys.setenv(LOCAL_CPPFLAGS = '-march=native') # for faster Stan execution
library('magrittr')
library('readr')
library('dplyr')
library('reshape2')
library('skimr')
library('tibble')
library('purrr')
library('circular')
library('ggplot2')
library('rstan')
rstan_options(auto_write = TRUE)
library('brms')
d2r <- function(x){
x <- x*pi/180
x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
dim(df)
x <- c(-2,-1,01,2,3,4,5,6,7,8)
x
d2r(x)
x
y<-d2r(x)
y
x
x <- x*pi/180
x
x <- c(-2,-1,01,2,3,4,5,6,7,8)
x[x > pi] <- x[x > pi] - 2*pi
x
df
df2
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores = parallel::detectCores())  # run all cores
Sys.setenv(LOCAL_CPPFLAGS = '-march=native') # for faster Stan execution
d2r <- function(x){
x <- x*pi/180
x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
df
df$heading[df$heading > 180]
length(df$heading[df$heading > 180])
length(df$heading[df$heading < 180])
length(df$heading[df$heading <= 180])
df %>%  mutate_all(list(d2r)) -> df2
df
d2r <- function(x){
x <- x*pi/180
# x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
#df %>%  mutate_all(list(d2r)) -> df2
d2r <- function(x){
x <- x*pi/180
# x[x > pi] <- x[x > pi] - 2*pi
}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
#df %>%  mutate_at( vars(contains("heading")) , list(d2r)) -> df2
df %>%  mutate_all(list(d2r)) -> df2
df2
help(mutate_if)
df$heading
df$Type
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>%  mutate_all(list(d2r)) -> df
df %>%
df$Type
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){x[x > pi] <- x - 2*pi}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(list(vonMisease))
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(list(vonMisease)) -> df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){vonMisease(x)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(list(vonMisease)) -> df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){vonMisease(x)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(list(vonMapease)) -> df
help(map)
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){map(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(list(vonMapease)) -> df
df2
x <- c(0,1,2,3,4,5,6,7,8)
y <- vonMapease(x)
y
df$heading
df$heading
df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){map(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df %>% mutate_all(vonMapease) -> df
df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){map(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(list(d2r)) -> df
df %>% mutate_all(vonMapease) -> df
df$heading
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){map(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df
df$heading
df %>% mutate_all(vonMapease) -> df
df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){map(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df %>% mutate_all(unlist(vonMapease)) -> df
df
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){modify(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df %>% mutate_all(unlist(vonMapease)) -> df
df
df$heading
df
rm(list=ls(9)
rm(list=ls())
library('magrittr')
library('readr')
library('dplyr')
library('reshape2')
library('skimr')
library('tibble')
library('purrr')
library('circular')
library('ggplot2')
library('rstan')
rstan_options(auto_write = TRUE)
library('brms')
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){modify(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate_all(d2r) -> df
df %>% mutate_all(unlist(vonMapease)) -> df
skim(df)
df %>% mutate(success = 0) -> df
#for(i in 1:length(df$Absolute_heading_radians)){df$success[i] <- NA}
for(i in 1:length(df$heading)){           ### get tote of each using one fifth of the circle
if(is.na(df$heading[i]) == TRUE){df$success[i] <- 0}
else if(df$heading[i] >   pi/6) {df$success[i] <- 0}    ## pi/5 beforehand
else if(df$heading[i] <= -pi/6 ){df$success[i] <- 0}  ## -pi/5 beforehand
else{df$success[i] <- 1}  }
df
Cplot2(df$heading)
source('Cplot2.R')
Cplot2(df$heading)
d2r <- function(x){ x <- x*pi/180 } # turn degrees to radians
vonMisease <- function(x){if(x > pi){x <- x-2*pi};return(x)}
vonMapease <- function(x){modify(x,vonMisease)}
df <- read_delim('../data/Ophiocoma_psychometric.txt', delim = '\t')
df %>% mutate(success = 0) -> df
#for(i in 1:length(df$Absolute_heading_radians)){df$success[i] <- NA}
for(i in 1:length(df$heading)){           ### get tote of each using one fifth of the circle
if(is.na(df$heading[i]) == TRUE){df$success[i] <- 0}
else if(df$heading[i] >   pi/6) {df$success[i] <- 0}    ## pi/5 beforehand
else if(df$heading[i] <= -pi/6 ){df$success[i] <- 0}  ## -pi/5 beforehand
else{df$success[i] <- 1}  }
source('Cplot2.R')
Cplot2(df$heading)
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
# mycirc <- function(angles, clock){
# 	if(missing(clock)){clock <- T}
# 	if(clock){
# 	return(
# 	as.circular(angles,
# 		units = 'degrees',
# 		type = 'angles', #don't set this to directions, apparently very different
# 		modulo = '2pi',
# 		zero = pi/2,
# 		rotation = 'clock',
# 		template = 'none')
# 		)
# 		}else{
# 		as.circular(angles,
# 		units = 'degrees',
# 		type = 'angles', #don't set this to directions, apparently very different
# 		modulo = '2pi',
# 		zero = pi/2,
# 		rotation = 'counter',
# 		template = 'none')
# 		}#if(clock)
# }
#
# CircCI <- function(mn, lci, uci, out, zro, drc, lng, ...){
# 	if(missing(lng)){lng <- 10*360/5} #bins #narrow them or they don't align with the actual angles!
# 	if(missing(drc)){drc <- 'clock'}
# 	if(missing(zro)){zro <- pi/2}
# 	#pi/2=start at screen top, pi=start at screen left, 3*pi/2=start at screen bottom, 0=start at sceen right
# 	if(missing(out)){out <- 0.05}
# 	if(missing(uci)){uci <- lci}
# 	lwr <- mn - lci
# 	upr <- mn + uci
# 	# if(lwr > 360){lwr <- lwr - 360}else{
# 		# if(lwr <0 ){lwr <- 360 - lwr}#if(lwr <0 )
# 	# }#if(lwr > 360)
# 	# if(upr > 360){upr <- upr - 360}else{
# 		# if(upr <0 ){upr <- 360 - upr}#if(upr <0 )
# 	# }#if(upr > 360)
# 	# print(paste('lower',lwr))
# 	# print(paste('upper',upr))
# 	circ.pos <- ( ((drc == 'clock')-1)*2 +1) * -seq( pi*lwr/180, pi*upr/180, length.out = lng) + zro
# 	circ.x <- cos(circ.pos)*(1+out)
# 	circ.y <- sin(circ.pos)*(1+out)
# 	lines(circ.x, circ.y, ...)
# 	lines.circular( as.circular(rep(lwr,2),units = 'degrees', type = 'angles', modulo = '2pi', zero = zro, rotation = drc, template = 'none'),
# 	out*c(0.5, 1.5), modulo = '2pi', zero = zro, rotation = drc, ...)
# 	lines.circular(as.circular(rep(upr,2),units = 'degrees', type = 'angles', modulo = '2pi', zero = zro, rotation = drc, template = 'none'),
#  	out*c(0.5, 1.5), modulo = '2pi', zero = zro, rotation = drc, ...)
# }
for(i in Type){
Cplot2(df$heading[df$Type==i],0.06)#,
# lci= mle.vonmises.bootstrap.ci(df$degree[df$stimulus_T==i])$mu.ci[1],
#  uci= mle.vonmises.bootstrap.ci(df$degree[df$stimulus_T==i])$mu.ci[1] )
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
source('Cplot2.R')
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
for(i in Type){
Cplot2(df$heading[df$Type==i],0.06)#,
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
df %>% mutate_all(d2r) -> df
df %>% mutate_all(unlist(vonMapease)) -> df
df %>% mutate(success = 0) -> df
for(i in 1:length(df$heading)){           ### get tote of each using one fifth of the circle
if(is.na(df$heading[i]) == TRUE){df$success[i] <- 0}
else if(df$heading[i] >   pi/6) {df$success[i] <- 0}    ## pi/5 beforehand
else if(df$heading[i] <= -pi/6 ){df$success[i] <- 0}  ## -pi/5 beforehand
else{df$success[i] <- 1}  }
skim(df)
source('Cplot2_rad.R')
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
for(i in Type){
rad_plot(df$heading[df$Type==i],0.06)#,
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
source('Cplot2_rad.R')
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
for(i in Type){
rad_plot(df$heading[df$Type==i],0.06)#,
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
lbl   <- c(0,pi)
lbl
lbl   <- charcter(0,pi)
lbl   <- character(0,pi)
lbl   <- char(0,pi)
lbl   <- as.character(0,pi)
lbl
lbl   <- as.character(c(0,pi))
lbl
lbl <- c("0","pi")
lbl
as,numeric(lbl)
as.numeric(lbl)
as.numeric(lbl)
as.numeric(pi)
source('Cplot2_rad.R')
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
for(i in Type){
rad_plot(df$heading[df$Type==i],0.06)#,
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
source('Cplot2_rad.R')
Type <- levels(as.factor(df$Type)); Type.prop <- vector()
par(mfrow = c(2,ceiling(length(Type)/2)));
par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right
j = 1;
for(i in Type){
rad_plot(df$heading[df$Type==i],0.06)#,
Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])
j <- j + 1  }
df %>% as_tibble %>%                 # dataframe name
mutate(in.quad = ifelse(abs(heading) < pi/4, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.pent = ifelse(abs(heading) < pi/5, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.sext = ifelse(abs(heading) < pi/6, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.oct = ifelse(abs(heading) < pi/8, 1, 0))  %>% # for data in radians -pi to pi
group_by(stimulus_T) %>%                # condition name
summarize(target = round(Type * 180 / pi)[1],
n_obs = n(),                   ## observations for treatment
#uniq_ind = n_distinct(individual),    ## unique individuals by treatment
mu = round(180*mean.circular(heading)/pi,0),
lo.ci = round(180*mle.vonmises.bootstrap.ci(heading)$mu.ci[1]/pi),
hi.ci = round(180*mle.vonmises.bootstrap.ci(heading)$mu.ci[2]/pi),
rho = round(rho.circular(heading),2),
kappa = unlist(mle.vonmises(heading)[3]),
v.stat =unlist(rayleigh.test(heading,mu=0)[1]),
v.p= unlist(rayleigh.test(heading,mu=0)[2]),
rayl.stat=unlist(rayleigh.test(heading)[1]),
rayl.p= unlist(rayleigh.test(heading)[2]),
c.mean = unlist(mean.circular(heading)[1]),
quad.prop = sum(in.quad)/length(in.quad),
pent.prop = sum(in.pent)/length(in.pent),
sext.prop = sum(in.sext)/length(in.sext),
oct.prop = sum(in.oct)/length(in.oct),
binom.p6 = unlist(
binom.test(sum(in.sext),length(in.sext),
p=1/6,alternative = "greater")[3]),
binom.p8 = unlist(
binom.test(sum(in.oct),length(in.oct),
p=1/8,alternative = "greater")[3]),
binom.p5 = unlist(
binom.test(sum(in.pent),length(in.pent),
p=1/5,alternative = "greater")[3])) -> circ_fun_facts
df %>% as_tibble %>%                 # dataframe name
mutate(in.quad = ifelse(abs(heading) < pi/4, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.pent = ifelse(abs(heading) < pi/5, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.sext = ifelse(abs(heading) < pi/6, 1, 0)) %>% # for data in radians -pi to pi
mutate(in.oct = ifelse(abs(heading) < pi/8, 1, 0))  %>% # for data in radians -pi to pi
group_by(Type) %>%                # condition name
summarize(target = round(Type * 180 / pi)[1],
n_obs = n(),                   ## observations for treatment
#uniq_ind = n_distinct(individual),    ## unique individuals by treatment
mu = round(180*mean.circular(heading)/pi,0),
lo.ci = round(180*mle.vonmises.bootstrap.ci(heading)$mu.ci[1]/pi),
hi.ci = round(180*mle.vonmises.bootstrap.ci(heading)$mu.ci[2]/pi),
rho = round(rho.circular(heading),2),
kappa = unlist(mle.vonmises(heading)[3]),
v.stat =unlist(rayleigh.test(heading,mu=0)[1]),
v.p= unlist(rayleigh.test(heading,mu=0)[2]),
rayl.stat=unlist(rayleigh.test(heading)[1]),
rayl.p= unlist(rayleigh.test(heading)[2]),
c.mean = unlist(mean.circular(heading)[1]),
quad.prop = sum(in.quad)/length(in.quad),
pent.prop = sum(in.pent)/length(in.pent),
sext.prop = sum(in.sext)/length(in.sext),
oct.prop = sum(in.oct)/length(in.oct),
binom.p6 = unlist(
binom.test(sum(in.sext),length(in.sext),
p=1/6,alternative = "greater")[3]),
binom.p8 = unlist(
binom.test(sum(in.oct),length(in.oct),
p=1/8,alternative = "greater")[3]),
binom.p5 = unlist(
binom.test(sum(in.pent),length(in.pent),
p=1/5,alternative = "greater")[3])) -> circ_fun_facts
## output dataframe
circ_fun_facts
circ_fun_facts
circ_fun_facts %>%
ggplot(aes(180*Type/pi, sext.prop)) + geom_line(color="pink",size=3)  + ylab("Proportion correct responses") +
theme_classic() + xlab("Stimulus period") +  ## data in target quadrant
geom_line(aes(y=oct.prop), color="red")   +                            ## data in target octant
geom_line(aes(y=quad.prop), color="blue")        +                       ## data in target octant
geom_line(data=circ_fun_facts,aes(x=180*Type/pi , y=pent.prop),size=1) +
geom_hline(yintercept = 1/6) +
geom_bin2d(data=df,aes(y = success, x = 180*Type/pi)) # counts
seq1 <- seq(from=0,to=1, length.out = 500)
seq3 <- seq(from=-4.5,to=4.5,length.out = 500)
plot((seq1),dstudent_t((seq1), 3, 0.167,0.05), main="Base")
plot(plogis(seq3),dnorm(plogis(seq3), 0.1,0.2), main="Lapse")
plot(exp(seq1),dnorm(exp(seq1), 1,1),main="Threshold and width")
plot(plogis(seq3),dstudent_t(plogis(seq3), 3, 0,0.25),main="Random intercepts of psychometric")
plot(seq1,dstudent_t(seq1, 3, 0,0.25),main="Random intercepts of lapse")
df$Type
df$Type
mle.vonmises.bootstrap.ci
library(circular)
help(mle.vonmises.bootstrap.ci)
