"0","Type <- levels(as.factor(df$Type)); Type.prop <- vector()"
"0","par(mfrow = c(2,ceiling(length(Type)/2)));  "
"0","par(mar = c(0.5, 0.5, 0.5, 0.5) + 0.1) # bottom, left, top, right"
"0","j = 1;"
"0",""
"0","mycirc <- function(angles, clock){"
"0","	if(missing(clock)){clock <- T}"
"0","	if(clock){"
"0","	return("
"0","	as.circular(angles,"
"0","		units = 'degrees', "
"0","		type = 'angles', #don't set this to directions, apparently very different "
"0","		modulo = '2pi', "
"0","		zero = pi/2, "
"0","		rotation = 'clock', "
"0","		template = 'none')"
"0","		)"
"0","		}else{"
"0","		as.circular(angles,"
"0","		units = 'degrees', "
"0","		type = 'angles', #don't set this to directions, apparently very different "
"0","		modulo = '2pi', "
"0","		zero = pi/2, "
"0","		rotation = 'counter', "
"0","		template = 'none')"
"0","		}#if(clock)"
"0","}"
"0",""
"0","CircCI <- function(mn, lci, uci, out, zro, drc, lng, ...){"
"0","	if(missing(lng)){lng <- 10*360/5} #bins #narrow them or they don't align with the actual angles!"
"0","	if(missing(drc)){drc <- 'clock'}"
"0","	if(missing(zro)){zro <- pi/2} "
"0","	#pi/2=start at screen top, pi=start at screen left, 3*pi/2=start at screen bottom, 0=start at sceen right"
"0","	if(missing(out)){out <- 0.05}"
"0","	if(missing(uci)){uci <- lci}"
"0","	lwr <- mn - lci"
"0","	upr <- mn + uci"
"0","	# if(lwr > 360){lwr <- lwr - 360}else{"
"0","		# if(lwr <0 ){lwr <- 360 - lwr}#if(lwr <0 )"
"0","	# }#if(lwr > 360)"
"0","	# if(upr > 360){upr <- upr - 360}else{"
"0","		# if(upr <0 ){upr <- 360 - upr}#if(upr <0 )"
"0","	# }#if(upr > 360)"
"0","	# print(paste('lower',lwr))"
"0","	# print(paste('upper',upr))"
"0","	circ.pos <- ( ((drc == 'clock')-1)*2 +1) * -seq( pi*lwr/180, pi*upr/180, length.out = lng) + zro"
"0","	circ.x <- cos(circ.pos)*(1+out)"
"0","	circ.y <- sin(circ.pos)*(1+out)"
"0","	lines(circ.x, circ.y, ...)"
"0","	lines.circular( as.circular(rep(lwr,2),units = 'degrees', type = 'angles', modulo = '2pi', zero = zro, rotation = drc, template = 'none'), "
"0","	out*c(0.5, 1.5), modulo = '2pi', zero = zro, rotation = drc, ...)"
"0","	lines.circular(as.circular(rep(upr,2),units = 'degrees', type = 'angles', modulo = '2pi', zero = zro, rotation = drc, template = 'none'),"
"0"," 	out*c(0.5, 1.5), modulo = '2pi', zero = zro, rotation = drc, ...)"
"0","}"
"0",""
"0",""
"0","Cplot <- function(headings, sp, bt, ax, ...){"
"0","	if(missing(ax)){ax <- F} #fit mean axis, fits mean direction unless otherwise specified"
"0","	#spacing of stacked points, now automatically stacks towards centre unless otherwise specified"
"0","	if(missing(sp) & missing(bt)){sp <- 0.04}"
"0","	#bt specifies the stacking by a multipicative factor, 1 = stacked, 2 = 1 point's space between, 0.5 = half overlapping"
"0","	if( missing(sp) & !(missing(bt)) ){sp <- bt*2}"
"0","	#	Get functions and packages"
"0","	if(sum(rownames(installed.packages()) %in% c('CircStats', 'circular'), na.rm = T)<2){"
"0","		install.packages(c('CircStats', 'circular'))	}"
"0","	if(!(	sum('CircCI'%in% ls())	)){"
"0","		CircCI <- function(mn, lci, uci, out, zro, drc, lng, ...){"
"0","			if(missing(lng)){lng<-10*360/5};	if(missing(drc)){drc<-'clock'}"
"0","			if(missing(zro)){zro <- pi/2};if(missing(out)){out <- 0.05}"
"0","			if(missing(uci)){uci <- lci}"
"0","			lwr <- mn - lci;	upr <- mn + uci"
"0","			circ.pos <- ( ((drc == 'clock')-1)*2 +1) * "
"0","				-seq( pi*lwr/180, pi*upr/180, length.out = lng) + zro"
"0","			circ.x <- cos(circ.pos)*(1+out);	circ.y <- sin(circ.pos)*(1+out)"
"0","			lines(circ.x, circ.y, ...)"
"0","			lines.circular( as.circular(rep(lwr,2),units = 'degrees', "
"0","				type = 'angles', modulo = '2pi', zero = zro, "
"0","				rotation = drc, template = 'none'), "
"0","				out*c(0.5, 1.5), modulo = '2pi', "
"0","				zero = zro, rotation = drc, ...)"
"0","			lines.circular(as.circular(rep(upr,2),units = 'degrees', "
"0","				type = 'angles', modulo = '2pi', zero = zro, "
"0","				rotation = drc, template = 'none'),"
"0","			 	out*c(0.5, 1.5), modulo = '2pi', zero = zro, "
"0","			 	rotation = drc, ...) 		}	}"
"0","	if(!(	sum('mycirc'%in% ls())	)){"
"0","		mycirc <- function(angles, clock){"
"0","			if(missing(clock)){clock <- T}"
"0","			if(clock){"
"0","			return(		as.circular(angles,units='degrees',type='angles',"
"0","			modulo='2pi',zero=pi/2,rotation='clock',	template='none')	)"
"0","				}else{"
"0","				as.circular(angles,units='degrees',type='angles',"
"0","				 modulo='2pi',zero=pi/2,rotation='counter',template='none')"
"0","				}	}	}"
"0","	#circular plot settings"
"0","	increments <- 5 #degrees"
"0","	zr <- pi/2 #start at top of screen (pi*	90	/180)"
"0","	bn <-  72  #10*10*360/5 #bins 	"
"0","	degrad <- 180/pi #conversion from radians to degrees"
"0","	tcl <- rgb(1,1,1,0)#transparent colour"
"0","	pcl <- rgb(.3,.1,.1,.5)#point colour"
"0","	#plot characters"
"0","	lw <- 0.5 #line width"
"0","	pnt <- 3 # 2.5 #point size"
"0","	arw <- 10 #arrowhead angle"
"0","	arl <- 0 #0.1 #arrowhead length"
"0","	#	set up input variables"
"0","	hd <- mycirc(headings)"
"0","	sm <- summary(hd)"
"0","	sv <- degrad*sd.circular(hd, na.rm=T)"
"0","	lbl <- 0 # 90*(1:4-1)"
"0","	plot(hd, col=tcl, main="""", zero=zr, axes=F, shrink=1,tol=0.075)"
"0","	axis.circular(1, at = mycirc(lbl), labels = lbl)"
"0","	par(new=T)"
"0","	plot.circular(hd, col=tcl,main="""",zero=zr,axes=F,shrink=1.05,tol=0.075)"
"0","	points(hd,stack=T,bin=bn,sep=-sp,zero=zr,...)"
"0","	if(!(ax)){"
"0","		arrows.circular( mycirc(sm['Mean']),zero=zr,col='red4',lwd=3,"
"0","		 length=arl,angle=arw,shrink = sm['Rho'])"
"0","		 CircCI(sm['Mean'], sv, out = 0.15, zro=zr, drc='clock',col='red4',lwd=1)	}else{"
"0","		 sm2 <- summary(mycirc(hd*2))"
"0","		 sv2 <- degrad*sd.circular(hd*2, na.rm=T)/2"
"0","		 arrows.circular( mycirc(sm2['Mean']/2),zero=zr,col='red4',lwd=3,"
"0","		 length=arl,angle=arw,shrink = sm2['Rho'])"
"0","		 arrows.circular( mycirc(180+sm2['Mean']/2),zero=zr,col='red4',lwd=3,"
"0","		 length=arl,angle=arw,shrink = sm2['Rho'])"
"0","		 CircCI(sm2['Mean']/2, sv2, out = 0.15, zro=zr, drc='clock',col='red4',lwd=1)"
"0","		 CircCI(180+sm2['Mean']/2, sv2, out = 0.15, zro=zr, drc='clock',col='red4',lwd=1)"
"0","	 } }#if(!(ax))"
"0",""
"0","for(i in Type){"
"0","    Cplot(df$heading_deg[df$Type==i],0.06)#,"
"0","         # lci= mle.vonmises.bootstrap.ci(df$degree[df$stimulus_period==i])$mu.ci[1],"
"0","         #  uci= mle.vonmises.bootstrap.ci(df$degree[df$stimulus_period==i])$mu.ci[1] )"
"0","    Type.prop[j] <- sum(df$success[df$Type==i])/length(df$success[df$Type==i])"
"0","    j <- j + 1  }"
